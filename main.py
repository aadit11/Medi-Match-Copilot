import logging
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any

from core.system_analyzer import SystemAnalyzer, create_system_analyzer
from core.diagnosis_engine import DiagnosisEngine, create_diagnosis_engine
from core.image_processor import ImageProcessor, create_image_processor
from utils.medical_validators import sanitize_patient_data
from patient_details import get_patient_data

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('medimatch.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def format_assessment_result(result: Dict[str, Any]) -> str:
    """Format the assessment result into a readable text format."""
    output = []
    
    output.append(f"Assessment Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    if "patient_info" in result:
        output.append("=== Patient Information ===")
        patient = result["patient_info"]
        output.append(f"Name: {patient.get('first_name', '')} {patient.get('last_name', '')}")
        output.append(f"Age: {patient.get('age', 'N/A')}")
        output.append(f"Gender: {patient.get('gender', 'N/A')}")
        output.append(f"Blood Type: {patient.get('blood_type', 'N/A')}")
        output.append("")
    
    if "symptoms" in result:
        output.append("=== Symptoms ===")
        symptoms = result["symptoms"]
        output.append(f"Primary Symptom: {symptoms.get('primary', 'N/A')}")
        if symptoms.get("secondary"):
            output.append("Secondary Symptoms:")
            for symptom in symptoms["secondary"]:
                output.append(f"- {symptom}")
        if symptoms.get("duration_days"):
            output.append(f"Duration: {symptoms['duration_days']} days")
        output.append("")
    
    if "diagnoses" in result:
        output.append("=== Potential Diagnoses ===")
        for i, diagnosis in enumerate(result["diagnoses"], 1):
            output.append(f"\n{i}. {diagnosis.get('name', 'Unknown')}")
            output.append(f"   Confidence: {diagnosis.get('confidence', 0)*100:.1f}%")
            if diagnosis.get("explanation"):
                output.append(f"   Explanation: {diagnosis['explanation']}")
            if diagnosis.get("recommendations"):
                output.append("   Recommendations:")
                for rec in diagnosis["recommendations"]:
                    output.append(f"   - {rec}")
        output.append("")
    
    if "image_analysis" in result and result["image_analysis"]:
        output.append("=== Image Analysis ===")
        image_analysis = result["image_analysis"]
        if "detailed_analysis" in image_analysis:
            output.append(image_analysis["detailed_analysis"])
        if "classifications" in image_analysis:
            output.append("\nImage-based Classifications:")
            for classification in image_analysis["classifications"]:
                output.append(f"- {classification.get('condition', 'Unknown')} "
                            f"(Confidence: {classification.get('confidence', 0)*100:.1f}%)")
        output.append("")
    
    if "combined_analysis" in result:
        output.append("=== Combined Analysis ===")
        output.append(result["combined_analysis"])
        output.append("")
    
    if "is_urgent" in result:
        output.append("=== Urgency Assessment ===")
        if result["is_urgent"]:
            output.append("⚠️ URGENT ATTENTION REQUIRED ⚠️")
            if "urgent_symptoms" in result:
                output.append("Urgent Symptoms:")
                for symptom in result["urgent_symptoms"]:
                    output.append(f"- {symptom}")
        else:
            output.append("No urgent attention required at this time.")
        output.append("")
    
    if "additional_notes" in result:
        output.append("=== Additional Notes ===")
        output.append(result["additional_notes"])
        output.append("")
    
    output.append("=== Important Notice ===")
    output.append("This assessment is generated by an AI system and is not a substitute for professional medical advice.")
    output.append("Always consult with qualified healthcare providers for proper diagnosis and treatment.")
    
    return "\n".join(output)

def save_assessment_to_file(assessment_text: str, patient_name: str) -> str:
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"assessment_{patient_name.replace(' ', '_')}_{timestamp}.txt"
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(assessment_text)
        logger.info(f"Assessment saved to {filename}")
        return filename
    except Exception as e:
        logger.error(f"Error saving assessment to file: {e}")
        raise

def main():
    try:
        system_analyzer = create_system_analyzer()
        
        patient_data = get_patient_data()
        
        sanitized_patient_info = sanitize_patient_data(patient_data["patient_info"])
        
        result = system_analyzer.analyze_case(
            primary_symptom=patient_data["symptoms"]["primary"],
            secondary_symptoms=patient_data["symptoms"]["secondary"],
            patient_info=sanitized_patient_info,
            medical_history=patient_data["medical_history"],
            duration_days=patient_data["symptoms"]["duration_days"],
            image_path=patient_data["image_info"]["image_path"] if patient_data["image_info"] else None,
            body_area=patient_data["image_info"]["body_area"] if patient_data["image_info"] else None
        )
        
        result["patient_info"] = sanitized_patient_info
        result["additional_notes"] = patient_data["additional_notes"]
        
        assessment_text = format_assessment_result(result)
        patient_name = f"{sanitized_patient_info['first_name']}_{sanitized_patient_info['last_name']}"
        output_file = save_assessment_to_file(assessment_text, patient_name)
        
        print(f"\nAssessment completed and saved to: {output_file}")
        print("\nAssessment Summary:")
        print("=" * 50)
        print(assessment_text)
        print("=" * 50)
        
    except Exception as e:
        logger.error(f"Error in main process: {e}")
        raise

if __name__ == "__main__":
    main()
